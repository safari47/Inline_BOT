from aiogram import Router, F
from aiogram.types import (
    InlineQuery,
    InlineQueryResultGif,
    Message,
    InlineQueryResultContact,
    Location,
    InlineQueryResultArticle,
    InlineQueryResultVenue,
)
from aiogram.filters import CommandStart
from keyboards.keyboard import main_kb
from utils.api import search_gifs, search_contact, search_organization
from config.config import bot

router = Router()


@router.message(CommandStart())
async def start(message: Message):
    username = message.from_user.first_name
    await message.answer(
        text=f"‚ú® –ü—Ä–∏–≤–µ—Ç, {username}! ‚ú®\n\n–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É, —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–ª–æ–≤–æ, –∞ —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â—É—é  –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! üéâ",
        reply_markup=main_kb(),
    )


# @router.inline_query()
# async def gifs_search(inline_query: InlineQuery):
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ InlineQuery —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Giphy API
#     """
#     query = inline_query.query  # –¢–µ–∫—Å—Ç, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
#     offset = inline_query.offset  # –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π offset
#     if not offset:
#         offset = 0
#     else:
#         offset = int(offset)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º offset –≤ —á–∏—Å–ª–æ

#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–∏—Ñ–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
#     limit = 25

#     # –ü–æ–ª—É—á–∞–µ–º GIF-–¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è –∏ –ª–∏–º–∏—Ç–∞
#     data_gif = await search_gifs(query=query, offset=offset, limit=limit)

#     # –°–æ–∑–¥–∞—ë–º InlineQueryResultGif –¥–ª—è –∫–∞–∂–¥–æ–≥–æ GIF
#     result = []
#     for i, gif in enumerate(data_gif):
#         result.append(
#             InlineQueryResultGif(
#                 id=str(i + offset),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
#                 gif_url=gif["images"]["original"]["url"],  # URL GIF
#                 thumbnail_url=gif["images"]["preview"]["mp4"],  # –ü—Ä–µ–≤—å—é
#                 title=gif["title"],  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ GIF
#             )
#         )

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
#     next_offset = offset + limit if len(data_gif) == limit else None

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å `next_offset` –≤ –æ—Ç–≤–µ—Ç–µ
#     await bot.answer_inline_query(
#         inline_query.id,
#         results=result,
#         is_personal=True,  # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         next_offset=str(next_offset) if next_offset is not None else '',  # –°–ª–µ–¥—É—é—â–∏–π –æ—Ñ—Ñ—Å–µ—Ç
#     )


# @router.inline_query()
# async def contact_search(inline_query: InlineQuery):
#     """
#     –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –∏–∑ —Å–µ–±—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –Ω–æ–º–µ—Ä–æ–≤
#     """
#     contact_data = await search_contact(inline_query.query)
#     result = []
#     for i, contact in enumerate(contact_data):
#         result.append(
#             InlineQueryResultContact(
#                 id=str(i),
#                 phone_number=contact.phone_number,
#                 first_name=contact.first_name,
#                 last_name=contact.last_name,
#                 vcard=f"BEGIN:VCARD\nVERSION:3.0\nN:{contact.last_name};{contact.first_name}\nFN:{contact.first_name} {contact.last_name}\nTEL;TYPE=CELL:{contact.phone_number}\nEND:VCARD",
#             )
#         )
#     await bot.answer_inline_query(inline_query.id, results=result)


@router.inline_query()
async def search_map(inline_query: InlineQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞—Ü–∏–∏
    if inline_query.location:
        latitude = inline_query.location.latitude
        longitude = inline_query.location.longitude

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –∑–∞–ø—Ä–æ—Å–∞
        organization = await search_organization(
            query=inline_query.query,
            latitude=latitude,
            longitude=longitude,
        )
        
        # –ï—Å–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞
        if organization:
            results = []
            for i, item in enumerate(organization):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —Ñ–æ—Ç–æ
                photo = item["external_content"][0].get("main_photo_url") if item.get("external_content") else None

                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ inline-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results.append(
                    InlineQueryResultVenue(
                        id=str(i),
                        latitude=item["point"]["lat"],
                        longitude=item["point"]["lon"],
                        title=item["name"],
                        address=item["address_name"],
                        thumbnail_url=photo,
                    )
                )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await inline_query.answer(results=results, cache_time=10)

        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await inline_query.answer(
                results=[],
                switch_pm_text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                switch_pm_parameter="no_results"
            )
    
    else:
        # –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await inline_query.answer(
            results=[],
            switch_pm_text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—á—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!",
            switch_pm_parameter="location_help"
        )